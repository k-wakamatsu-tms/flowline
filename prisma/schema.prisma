// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js用のモデル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user                     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // アプリケーション固有のリレーション
  workspaces        WorkspaceMember[]
  assignedTasks     Task[]            @relation("TaskAssignee")
  createdWorkspaces Workspace[]       @relation("WorkspaceOwner")
  notifications     Notification[]
  comments          Comment[]
  attachments       Attachment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// アプリケーション固有のモデル
model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  // リレーション
  owner    User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members  WorkspaceMember[]
  projects Project[]
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  role        String   @default("member") // "owner" | "member"
  joinedAt    DateTime @default(now())

  // リレーション
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  workspaceId String
  dueDate     DateTime?
  status      String    @default("未着手") // "未着手" | "進行中" | "完了" | "保留"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // リレーション
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  sections  Section[]
  tasks     Task[]
}

model Section {
  id        String   @id @default(cuid())
  name      String
  projectId String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@unique([projectId, order])
}

model Task {
  id           String    @id @default(cuid())
  name         String
  description  String?
  projectId    String
  sectionId    String
  assigneeId   String?
  dueDate      DateTime?
  priority     String    @default("中") // "高" | "中" | "低"
  status       String    @default("未着手") // "未着手" | "進行中" | "レビュー待ち" | "完了" | "保留"
  parentTaskId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // リレーション
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  section     Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id])
  parentTask  Task?        @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subTasks    Task[]       @relation("TaskHierarchy")
  comments    Comment[]
  attachments Attachment[]
  tags        TaskTag[]
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  fileName  String
  fileUrl   String
  fileSize  Int
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

model Tag {
  id    String    @id @default(cuid())
  name  String
  color String    @default("#000000")
  tasks TaskTag[]
}

model TaskTag {
  taskId String
  tagId  String

  // リレーション
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // リレーション
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
